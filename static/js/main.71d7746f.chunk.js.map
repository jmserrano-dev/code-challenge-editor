{"version":3,"sources":["stores/models/box-model.js","stores/store.js","hooks/store-context.js","components/box/box.js","components/canvas/canvas.js","components/draggable/draggable.js","components/draggable/useDraggable.js","modules/editor/editor-canvas/editor-canvas.js","modules/editor/editor-canvas/editor-canvas.service.js","components/layout/box-layout/box-layout.js","components/layout/page-layout/page-layout.js","components/text/text.js","components/input/input.js","components/button/button.js","modules/editor/editor-toolbar/editor-toolbar.service.js","components/toolbar/toolbar.js","modules/editor/editor-toolbar/editor-toolbar.js","modules/editor/editor.js","modules/app.js","serviceWorker.js","index.js"],"names":["BoxModel","types","model","id","identifier","width","height","color","left","top","isSelected","views","self","actions","toogleSelection","changeColor","unselect","move","RootStore","boxes","array","history","optional","TimeTraveller","targetPath","filter","box","length","addBox","push","removeBoxes","forEach","StoreContext","React","createContext","StoreProvider","children","store","Provider","value","useStore","useContext","Box","props","data-testid","className","join","style","backgroundColor","onClick","Canvas","onUnSelectAll","Draggable","callback","ref","useRef","useState","isDragging","setDragging","useEffect","interact","current","draggable","inertia","autoScroll","modifiers","restrictRect","endOnly","restriction","listeners","start","end","target","setTimeout","getCurrentPosition","currentTop","currentLeft","dy","dx","transform","setAttribute","parseFloat","getAttribute","useDraggable","onMove","data-top","data-left","EditorCanvas","observer","onSelect","event","preventDefault","stopPropagation","useEditorCanvas","map","key","BoxLayout","gap","PageLayout","Text","content","Input","Button","label","useToolbarActions","remove","disabled","countSelection","undo","canUndo","redo","canRedo","onUndo","onRedo","onAddBox","create","uuid","createNewBox","onRemoveBoxes","Toolbar","ToolbarGroup","justify","EditorToolbar","setColor","onChangeColor","debounce","newColor","useColorPicker","type","defaultValue","onChange","Editor","App","enablePersist","persist","storage","localStorage","jsonify","createStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71d7746f.chunk.js","sourcesContent":["import { types } from \"mobx-state-tree\";\n\nconst BoxModel = types\n  .model(\"Box\", {\n    id: types.identifier,\n    width: 200,\n    height: 100,\n    color: \"#FFF000\",\n    left: 200,\n    top: 100,\n    isSelected: false,\n  })\n  .views((self) => ({}))\n  .actions((self) => ({\n    toogleSelection() {\n      self.isSelected = !self.isSelected;\n    },\n    changeColor(color) {\n      self.color = color;\n    },\n    unselect() {\n      self.isSelected = false;\n    },\n    move(top, left) {\n      self.top = top;\n      self.left = left;\n    },\n  }));\n\nexport { BoxModel };\n","import { persist } from \"mst-persist\";\nimport { types } from \"mobx-state-tree\";\nimport { TimeTraveller } from \"mst-middlewares\";\n\nimport { BoxModel } from \"./models/box-model\";\n\nconst RootStore = types\n  .model(\"RootStore\", {\n    boxes: types.array(BoxModel),\n    history: types.optional(TimeTraveller, { targetPath: \"../boxes\" }),\n  })\n  .views((self) => ({\n    get countSelection() {\n      return self.boxes.filter((box) => box.isSelected).length;\n    },\n  }))\n  .actions((self) => {\n    return {\n      addBox(box) {\n        self.boxes.push(box);\n      },\n      removeBoxes() {\n        self.boxes = self.boxes.filter((box) => !box.isSelected);\n      },\n      unselect() {\n        self.boxes.forEach((box) => {\n          box.unselect();\n        });\n      },\n      changeColor(color) {\n        self.boxes.forEach((box) => {\n          if (box.isSelected) box.changeColor(color);\n        });\n      },\n    };\n  });\n\nconst createStore = (enablePersist = true) => {\n  const store = RootStore.create();\n\n  if (enablePersist) {\n    persist(\"store\", store, {\n      storage: localStorage,\n      jsonify: true,\n    });\n  }\n\n  return store;\n};\n\nexport { createStore };\n","import React from \"react\";\n\nconst StoreContext = React.createContext();\n\nconst StoreProvider = ({ children, store }) => {\n  return (\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n  );\n};\n\nconst useStore = () => React.useContext(StoreContext);\n\nexport { StoreProvider, useStore };\n","import React from \"react\";\n\nimport \"./box.css\";\n\nconst Box = (props) => {\n  return (\n    <div\n      data-testid=\"box\"\n      id={props.id}\n      className={[\"box\", props.isSelected ? \"box--selected\" : \"\"].join(\" \")}\n      style={{\n        width: props.width,\n        height: props.height,\n        backgroundColor: props.color,\n      }}\n      onClick={props.onClick}\n    >\n      Box\n    </div>\n  );\n};\n\nexport { Box };\n","import React from \"react\";\n\nimport \"./canvas.css\";\n\nconst Canvas = ({ children, onUnSelectAll, ...props }) => {\n  return (\n    <div {...props} className=\"canva\" onClick={onUnSelectAll}>\n      {children}\n    </div>\n  );\n};\n\nexport { Canvas };\n","import React from \"react\";\n\nimport { useDraggable } from \"./useDraggable\";\n\nimport \"./draggable.css\";\n\nconst Draggable = (props) => {\n  const { ref, isDragging } = useDraggable(props.onMove);\n\n  return (\n    <div\n      ref={ref}\n      data-top={props.top}\n      data-left={props.left}\n      className={[\n        \"draggable\",\n        props.isSelected ? \"draggable--selected\" : \"\",\n        isDragging ? \"draggable--dragging\" : \"\",\n      ].join(\" \")}\n      style={{\n        width: props.width,\n        height: props.height,\n        transform: `translate(${props.left}px, ${props.top}px)`,\n      }}\n    >\n      {props.children({ isDragging })}\n    </div>\n  );\n};\n\nexport { Draggable };\n","import interact from \"interactjs\";\nimport { useEffect, useRef, useState } from \"react\";\n\nconst useDraggable = (callback) => {\n  const ref = useRef();\n  const [isDragging, setDragging] = useState(false);\n\n  useEffect(() => {\n    interact(ref.current).draggable({\n      inertia: true,\n      autoScroll: false,\n      modifiers: [\n        interact.modifiers.restrictRect({\n          endOnly: true,\n          restriction: \"parent\",\n        }),\n      ],\n\n      listeners: {\n        start() {\n          setDragging(true);\n        },\n        end({ target }) {\n          setTimeout(() => setDragging(false));\n\n          const { currentTop, currentLeft } = getCurrentPosition(target);\n          callback(currentTop, currentLeft);\n        },\n        move({ target, dy, dx }) {\n          const { currentTop, currentLeft } = getCurrentPosition(target);\n\n          var top = currentTop + dy;\n          var left = currentLeft + dx;\n\n          target.style.transform = `translate(${left}px, ${top}px)`;\n\n          target.setAttribute(\"data-top\", top);\n          target.setAttribute(\"data-left\", left);\n        },\n      },\n    });\n  }, [callback]);\n\n  const getCurrentPosition = (target) => {\n    const currentTop = parseFloat(target.getAttribute(\"data-top\")) || 0;\n    const currentLeft = parseFloat(target.getAttribute(\"data-left\")) || 0;\n\n    return { currentTop, currentLeft };\n  };\n\n  return { ref, isDragging };\n};\n\nexport { useDraggable };\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { useStore } from \"../../../hooks\";\nimport { Box } from \"../../../components/box\";\nimport { Canvas } from \"../../../components/canvas\";\nimport { Draggable } from \"../../../components/draggable\";\nimport { useEditorCanvas } from \"./editor-canvas.service\";\n\nconst EditorCanvas = observer(() => {\n  const store = useStore();\n  const { boxes, onSelect, onUnSelectAll } = useEditorCanvas(store);\n\n  return (\n    <Canvas data-testid=\"canvas\" onUnSelectAll={onUnSelectAll}>\n      {boxes.map((box) => (\n        <Draggable\n          key={`${box.id}${box.color}`}\n          left={box.left}\n          top={box.top}\n          width={box.width}\n          height={box.height}\n          isSelected={box.isSelected}\n          onMove={(top, left) => box.move(top, left)}\n        >\n          {({ isDragging }) => (\n            <Box\n              id={box.id}\n              color={box.color}\n              width={box.width}\n              height={box.height}\n              isSelected={box.isSelected}\n              onClick={(event) => onSelect(event, isDragging, box)}\n            />\n          )}\n        </Draggable>\n      ))}\n    </Canvas>\n  );\n});\n\nexport { EditorCanvas };\n","const useEditorCanvas = (store) => {\n  const onSelect = (event, isDragging, box) => {\n    if (!isDragging) box.toogleSelection();\n\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const onUnSelectAll = () => store.unselect();\n\n  return { boxes: store.boxes, onSelect, onUnSelectAll };\n};\n\nexport { useEditorCanvas };\n","import React from \"react\";\n\nimport \"./box-layout.css\";\n\nconst BoxLayout = ({ gap = \"m\", children, ...props }) => {\n  return (\n    <div {...props} className={`box-layout ${gap}`}>\n      {children}\n    </div>\n  );\n};\n\nexport { BoxLayout };\n","import React from \"react\";\n\nimport \"./page-layout.css\";\n\nconst PageLayout = ({ gap = \"m\", children }) => {\n  return <div className={`page-layout ${gap}`}>{children}</div>;\n};\n\nexport { PageLayout };\n","import React from \"react\";\n\nconst Text = ({ content }) => {\n  return <span>{content}</span>;\n};\n\nexport { Text };\n","import React from \"react\";\n\nconst Input = (props) => {\n  return <input {...props} />;\n};\n\nexport { Input };\n","import React from \"react\";\n\nconst Button = ({ label, ...props }) => {\n  return <button {...props}>{label}</button>;\n};\n\nexport { Button };\n","import uuid from \"uuid/v4\";\nimport { useState } from \"react\";\nimport { debounce } from \"throttle-debounce\";\n\nimport { BoxModel } from \"../../../stores/models\";\n\nconst DEFAULT_COLOR = \"#15D1C4\";\n\nconst useColorPicker = (store) => {\n  const [color, setColor] = useState(DEFAULT_COLOR);\n\n  const onChangeColor = debounce(500, (newColor) => {\n    setColor(newColor);\n    if (store.countSelection > 0) {\n      store.changeColor(newColor);\n    }\n  });\n\n  return { color, onChangeColor };\n};\n\nconst useToolbarActions = (store) => {\n  const createNewBox = (color) => {\n    return BoxModel.create({ id: uuid(), color, left: 50, top: 50 });\n  };\n\n  const onAddBox = (color) => {\n    const box = createNewBox(color);\n    store.addBox(box);\n  };\n\n  const onRemoveBoxes = () => {\n    store.removeBoxes();\n  };\n\n  const onUndo = () => store.history.undo();\n\n  const onRedo = () => store.history.redo();\n\n  const actions = {\n    remove: {\n      disabled: store.countSelection === 0,\n    },\n    undo: {\n      disabled: !store.history.canUndo,\n    },\n    redo: {\n      disabled: !store.history.canRedo,\n    },\n  };\n\n  return { actions, onUndo, onRedo, onAddBox, onRemoveBoxes };\n};\n\nexport { useColorPicker, useToolbarActions };\n","import React from \"react\";\n\nimport \"./toolbar.css\";\n\nconst Toolbar = ({ children, ...props }) => {\n  return (\n    <nav {...props} className=\"toolbar\">\n      {children}\n    </nav>\n  );\n};\n\nconst ToolbarGroup = ({ justify = \"start\", children }) => {\n  return <div className={`layout__group ${justify}`}>{children}</div>;\n};\n\nexport { Toolbar, ToolbarGroup };\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { useStore } from \"../../../hooks\";\nimport { Text } from \"../../../components/text\";\nimport { Input } from \"../../../components/input\";\nimport { Button } from \"../../../components/button\";\nimport { useColorPicker } from \"./editor-toolbar.service\";\nimport { useToolbarActions } from \"./editor-toolbar.service\";\nimport { Toolbar, ToolbarGroup } from \"../../../components/toolbar\";\n\nconst EditorToolbar = observer(() => {\n  const store = useStore();\n  const { color, onChangeColor } = useColorPicker(store);\n  const { actions, onUndo, onRedo, onAddBox, onRemoveBoxes } =\n    useToolbarActions(store);\n\n  return (\n    <Toolbar data-testid=\"toolbar\">\n      <ToolbarGroup>\n        <Button label=\"Add Box\" onClick={() => onAddBox(color)} />\n        <Button\n          label=\"Remove Box\"\n          disabled={actions.remove.disabled}\n          onClick={onRemoveBoxes}\n        />\n\n        <Input\n          type=\"color\"\n          defaultValue={color}\n          data-testid=\"input-color\"\n          onChange={(event) => onChangeColor(event.target.value)}\n        />\n      </ToolbarGroup>\n\n      <Text content={`${store.countSelection} boxes selected`} />\n\n      <ToolbarGroup justify=\"end\">\n        <Button\n          label=\"Undo\"\n          disabled={actions.undo.disabled}\n          onClick={onUndo}\n        />\n\n        <Button\n          label=\"Redo\"\n          disabled={actions.redo.disabled}\n          onClick={onRedo}\n        />\n      </ToolbarGroup>\n    </Toolbar>\n  );\n});\n\nexport { EditorToolbar };\n","import React from \"react\";\n\nimport { EditorCanvas } from \"./editor-canvas/editor-canvas\";\nimport { BoxLayout, PageLayout } from \"../../components/layout\";\nimport { EditorToolbar } from \"./editor-toolbar/editor-toolbar\";\n\nconst Editor = () => {\n  return (\n    <BoxLayout data-testid=\"editor\">\n      <PageLayout>\n        <EditorToolbar />\n        <EditorCanvas />\n      </PageLayout>\n    </BoxLayout>\n  );\n};\n\nexport { Editor };\n","import React from \"react\";\n\nimport { createStore } from \"../stores\";\nimport { Editor } from \"./editor/editor\";\nimport { StoreProvider } from \"../hooks\";\n\nimport \"./app.css\";\n\nconst App = ({ enablePersist = true }) => {\n  const store = createStore(enablePersist);\n\n  return (\n    <div data-testid=\"app\" className=\"app\">\n      <StoreProvider store={store}>\n        <Editor />\n      </StoreProvider>\n    </div>\n  );\n};\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./modules/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./main.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}